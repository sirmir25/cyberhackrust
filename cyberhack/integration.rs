// ============================================================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –û–¢–°–´–õ–û–ö –í –û–°–ù–û–í–ù–£–Æ –ò–ì–†–£
// ============================================================================

use std::collections::HashMap;
use std::time::Duration;
use rand::Rng;

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç—Å—ã–ª–∫–∞–º–∏ –≤ CommandProcessor
pub fn add_reference_commands(processor: &mut CommandProcessor) {
    // –ö–æ–º–∞–Ω–¥—ã –≤ —Å—Ç–∏–ª–µ Hacknet
    processor.commands.insert("netmap".to_string(), Command {
        name: "netmap".to_string(),
        description: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–∏ (Hacknet style)".to_string(),
        usage: "netmap <target_ip>".to_string(),
        requires_target: true,
        requires_connection: false,
    });
    
    processor.commands.insert("portscan".to_string(), Command {
        name: "portscan".to_string(),
        description: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ (Hacknet style)".to_string(),
        usage: "portscan <target_ip> [port_range]".to_string(),
        requires_target: true,
        requires_connection: false,
    });
    
    processor.commands.insert("sshcrack".to_string(), Command {
        name: "sshcrack".to_string(),
        description: "–í–∑–ª–æ–º SSH (Hacknet style)".to_string(),
        usage: "sshcrack <target_ip>".to_string(),
        requires_target: true,
        requires_connection: false,
    });
    
    processor.commands.insert("ftpbounce".to_string(), Command {
        name: "ftpbounce".to_string(),
        description: "FTP bounce –∞—Ç–∞–∫–∞ (Hacknet style)".to_string(),
        usage: "ftpbounce <target_ip>".to_string(),
        requires_target: true,
        requires_connection: false,
    });
    
    processor.commands.insert("decypher".to_string(), Command {
        name: "decypher".to_string(),
        description: "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ (Hacknet style)".to_string(),
        usage: "decypher <filename>".to_string(),
        requires_target: true,
        requires_connection: true,
    });
    
    // –ö–æ–º–∞–Ω–¥—ã –∏–∑ Mr. Robot
    processor.commands.insert("fsociety".to_string(), Command {
        name: "fsociety".to_string(),
        description: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã fsociety".to_string(),
        usage: "fsociety [operation]".to_string(),
        requires_target: false,
        requires_connection: false,
    });
    
    // –ö–æ–º–∞–Ω–¥—ã –∏–∑ Fight Club
    processor.commands.insert("mayhem".to_string(), Command {
        name: "mayhem".to_string(),
        description: "Project Mayhem toolkit".to_string(),
        usage: "mayhem <target> <operation>".to_string(),
        requires_target: true,
        requires_connection: false,
    });
    
    // –ö–æ–º–∞–Ω–¥—ã –∏–∑ Hackers
    processor.commands.insert("gibson".to_string(), Command {
        name: "gibson".to_string(),
        description: "–î–æ—Å—Ç—É–ø –∫ Gibson supercomputer".to_string(),
        usage: "gibson <command>".to_string(),
        requires_target: false,
        requires_connection: false,
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–∞—Å—Ö–∞–ª–æ–∫
    processor.commands.insert("hack_the_planet".to_string(), Command {
        name: "hack_the_planet".to_string(),
        description: "HACK THE PLANET! (Hackers reference)".to_string(),
        usage: "hack_the_planet".to_string(),
        requires_target: false,
        requires_connection: false,
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –æ—Ç—Å—ã–ª–∫–∞–º–∏
pub fn handle_reference_command(command: &str, args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    match command {
        "netmap" => handle_netmap_command(args, state, terminal),
        "portscan" => handle_portscan_command(args, state, terminal),
        "sshcrack" => handle_sshcrack_command(args, state, terminal),
        "ftpbounce" => handle_ftpbounce_command(args, state, terminal),
        "decypher" => handle_decypher_command(args, state, terminal),
        "fsociety" => handle_fsociety_command(args, state, terminal),
        "mayhem" => handle_mayhem_command(args, state, terminal),
        "gibson" => handle_gibson_command(args, state, terminal),
        "hack_the_planet" => handle_hack_the_planet_command(state, terminal),
        _ => false,
    }
}

fn handle_netmap_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    if args.is_empty() {
        terminal.print_with_effect("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: netmap <target_ip>", TerminalEffect::Error);
        return true;
    }
    
    let target = args[0];
    terminal.print_with_effect(&format!("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ {} –≤ —Å—Ç–∏–ª–µ Hacknet...", target), TerminalEffect::Matrix);
    terminal.loading_animation("–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–∏", Duration::from_secs(2));
    
    if target == "localhost" {
        // –ü–∞—Å—Ö–∞–ª–∫–∞!
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("üéâ HACKNET TERMINAL ACTIVATED! üéâ", TerminalEffect::Success);
        terminal.print_with_effect("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π Hacknet —Ç–µ—Ä–º–∏–Ω–∞–ª!", TerminalEffect::Matrix);
        terminal.print_with_effect("–î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Hacknet!", TerminalEffect::Success);
        terminal.print_with_effect("ü•ö –ü–∞—Å—Ö–∞–ª–∫–∞: Hacknet —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!", TerminalEffect::Success);
        return true;
    }
    
    let mut rng = rand::thread_rng();
    if rng.gen_bool(0.7) {
        terminal.print_with_effect("‚ïê‚ïê‚ïê NETMAP RESULTS ‚ïê‚ïê‚ïê", TerminalEffect::Matrix);
        terminal.print_with_effect(&format!("–¶–µ–ª—å: {}", target), TerminalEffect::Normal);
        terminal.print_with_effect("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É–∑–ª—ã:", TerminalEffect::Normal);
        
        let nodes = vec![
            format!("{}.1 - Router", target.split('.').take(3).collect::<Vec<_>>().join(".")),
            format!("{}.10 - Workstation", target.split('.').take(3).collect::<Vec<_>>().join(".")),
            format!("{}.50 - Server", target.split('.').take(3).collect::<Vec<_>>().join(".")),
            format!("{}.100 - Database", target.split('.').take(3).collect::<Vec<_>>().join(".")),
        ];
        
        for node in &nodes {
            terminal.print_with_effect(&format!("  {}", node), TerminalEffect::Success);
        }
        
        state.player.experience += 30;
        terminal.print_with_effect("+30 XP –∑–∞ —Å–µ—Ç–µ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", TerminalEffect::Success);
    } else {
        terminal.print_with_effect("‚ùå –¶–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω–∞ —Ñ–∞–π—Ä–≤–æ–ª–æ–º", TerminalEffect::Error);
    }
    
    true
}

fn handle_portscan_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    if args.is_empty() {
        terminal.print_with_effect("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: portscan <target_ip> [port_range]", TerminalEffect::Error);
        return true;
    }
    
    let target = args[0];
    let port_range = if args.len() > 1 { args[1] } else { "1-1000" };
    
    terminal.print_with_effect(&format!("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ {} –¥–∏–∞–ø–∞–∑–æ–Ω {}...", target, port_range), TerminalEffect::Matrix);
    terminal.loading_animation("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤", Duration::from_secs(3));
    
    let mut rng = rand::thread_rng();
    if rng.gen_bool(0.8) {
        terminal.print_with_effect("‚ïê‚ïê‚ïê PORT SCAN RESULTS ‚ïê‚ïê‚ïê", TerminalEffect::Matrix);
        
        let open_ports = vec![
            ("22", "SSH", "üü¢"),
            ("80", "HTTP", "üü¢"),
            ("443", "HTTPS", "üü¢"),
            ("21", "FTP", "üü°"),
            ("23", "Telnet", "üî¥"),
            ("25", "SMTP", "üü¢"),
            ("53", "DNS", "üü¢"),
            ("3389", "RDP", "üî¥"),
        ];
        
        for (port, service, status) in &open_ports[0..rng.gen_range(3..open_ports.len())] {
            terminal.print_with_effect(&format!("  {}/tcp OPEN - {} {}", port, service, status), TerminalEffect::Success);
        }
        
        state.player.experience += 25;
        terminal.print_with_effect("+25 XP –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ (Hacknet style)", TerminalEffect::Success);
    } else {
        terminal.print_with_effect("‚ùå –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã", TerminalEffect::Error);
    }
    
    true
}

fn handle_sshcrack_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    if args.is_empty() {
        terminal.print_with_effect("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sshcrack <target_ip>", TerminalEffect::Error);
        return true;
    }
    
    let target = args[0];
    terminal.print_with_effect(&format!("üîê SSH Crack –Ω–∞ {} (Hacknet style)...", target), TerminalEffect::Matrix);
    terminal.loading_animation("–ë—Ä—É—Ç—Ñ–æ—Ä—Å SSH-–∫–ª—é—á–µ–π", Duration::from_secs(4));
    
    let mut rng = rand::thread_rng();
    let hacking_skill = *state.skills.get("–í–∑–ª–æ–º").unwrap_or(&0);
    let success_chance = (hacking_skill as f64 / 100.0) * 0.6 + 0.2;
    
    if rng.gen_bool(success_chance) {
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("üéØ SSH CRACKED SUCCESSFULLY!", TerminalEffect::Success);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("Connection established to remote host", TerminalEffect::Success);
        terminal.print_with_effect("Remote OS: NAIX 2.4.1", TerminalEffect::Normal);
        terminal.print_with_effect("User: hacknet_user", TerminalEffect::Normal);
        terminal.print_with_effect("Access Level: Standard", TerminalEffect::Normal);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("ü•ö –û—Ç—Å—ã–ª–∫–∞ –∫ Hacknet: SSH –≤–∑–ª–æ–º!", TerminalEffect::Matrix);
        
        state.player.current_system = Some(target.to_string());
        state.player.experience += 100;
        terminal.print_with_effect("+100 XP –∑–∞ SSH –≤–∑–ª–æ–º", TerminalEffect::Success);
    } else {
        terminal.print_with_effect("‚ùå SSH crack failed", TerminalEffect::Error);
        terminal.print_with_effect("Target appears to have updated security protocols", TerminalEffect::Warning);
    }
    
    true
}

fn handle_ftpbounce_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    if args.is_empty() {
        terminal.print_with_effect("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ftpbounce <target_ip>", TerminalEffect::Error);
        return true;
    }
    
    let target = args[0];
    terminal.print_with_effect(&format!("üìÅ FTP Bounce –∞—Ç–∞–∫–∞ –Ω–∞ {} (Hacknet style)...", target), TerminalEffect::Matrix);
    terminal.loading_animation("–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è FTP —Å–µ—Ä–≤–∏—Å–∞", Duration::from_secs(3));
    
    let mut rng = rand::thread_rng();
    if rng.gen_bool(0.6) {
        terminal.print_with_effect("‚úÖ FTP BOUNCE SUCCESSFUL!", TerminalEffect::Success);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("FTP server compromised", TerminalEffect::Success);
        terminal.print_with_effect("Available directories:", TerminalEffect::Normal);
        terminal.print_with_effect("  /home/ftp/public/", TerminalEffect::Normal);
        terminal.print_with_effect("  /var/log/", TerminalEffect::Normal);
        terminal.print_with_effect("  /tmp/uploads/", TerminalEffect::Normal);
        terminal.print_with_effect("  /etc/passwd", TerminalEffect::Warning);
        
        state.player.experience += 75;
        terminal.print_with_effect("+75 XP –∑–∞ FTP —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é", TerminalEffect::Success);
    } else {
        terminal.print_with_effect("‚ùå FTP bounce failed", TerminalEffect::Error);
        terminal.print_with_effect("Server has patched bounce vulnerabilities", TerminalEffect::Warning);
    }
    
    true
}

fn handle_decypher_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    if args.is_empty() {
        terminal.print_with_effect("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: decypher <filename>", TerminalEffect::Error);
        return true;
    }
    
    if state.player.current_system.is_none() {
        terminal.print_with_effect("‚ùå No active connection to remote system", TerminalEffect::Error);
        return true;
    }
    
    let filename = args[0];
    terminal.print_with_effect(&format!("üîì DECypher –∑–∞–ø—É—â–µ–Ω –¥–ª—è {}...", filename), TerminalEffect::Matrix);
    terminal.loading_animation("Analyzing encryption algorithms", Duration::from_secs(5));
    
    let mut rng = rand::thread_rng();
    let crypto_skill = *state.skills.get("–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è").unwrap_or(&0);
    let success_chance = (crypto_skill as f64 / 100.0) * 0.7 + 0.3;
    
    if rng.gen_bool(success_chance) {
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("üîê DECRYPTION SUCCESSFUL!", TerminalEffect::Success);
        terminal.print_with_effect("", TerminalEffect::Normal);
        
        match filename {
            "entropy.dat" => {
                terminal.print_with_effect("=== CLASSIFIED ENTROPY DATA ===", TerminalEffect::Error);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("ENTROPY ORGANIZATION - LEVEL OMEGA", TerminalEffect::Error);
                terminal.print_with_effect("Objective: Maximum entropy in digital systems", TerminalEffect::Warning);
                terminal.print_with_effect("Method: Hacknet protocol distribution", TerminalEffect::Normal);
                terminal.print_with_effect("Status: ACTIVE", TerminalEffect::Error);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("ü•ö –ù–∞–π–¥–µ–Ω–∞ –æ—Ç—Å—ã–ª–∫–∞ –∫ Hacknet: Entropy!", TerminalEffect::Matrix);
            },
            "naix.sys" => {
                terminal.print_with_effect("NAIX Operating System Core", TerminalEffect::Matrix);
                terminal.print_with_effect("Built for hackers, by hackers", TerminalEffect::Success);
                terminal.print_with_effect("ü•ö NAIX OS –∏–∑ Hacknet –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!", TerminalEffect::Success);
            },
            _ => {
                terminal.print_with_effect("File contents:", TerminalEffect::Normal);
                terminal.print_with_effect("Decrypted data reveals system vulnerabilities", TerminalEffect::Success);
                terminal.print_with_effect("Hacknet-style encryption broken", TerminalEffect::Matrix);
            }
        }
        
        state.player.experience += 120;
        terminal.print_with_effect("+120 XP –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", TerminalEffect::Success);
    } else {
        terminal.print_with_effect("‚ùå Decryption failed", TerminalEffect::Error);
        terminal.print_with_effect("Encryption algorithm too advanced", TerminalEffect::Warning);
        terminal.print_with_effect("Require higher cryptography skill", TerminalEffect::Normal);
    }
    
    true
}

fn handle_fsociety_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üëæ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üëæ", TerminalEffect::Matrix);
    terminal.print_with_effect("                FSOCIETY TOOLKIT              ", TerminalEffect::Matrix);
    terminal.print_with_effect("üëæ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üëæ", TerminalEffect::Matrix);
    terminal.print_with_effect("", TerminalEffect::Normal);
    
    if args.is_empty() {
        terminal.print_with_effect("Hello, friend.", TerminalEffect::TypeWriter);
        thread::sleep(Duration::from_millis(500));
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ fsociety", TerminalEffect::Matrix);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:", TerminalEffect::Normal);
        terminal.print_with_effect("  fsociety debt_erase    - –û–ø–µ—Ä–∞—Ü–∏—è 5/9: –°—Ç–µ—Ä–µ—Ç—å –¥–æ–ª–≥–∏", TerminalEffect::Success);
        terminal.print_with_effect("  fsociety evil_corp     - –ê—Ç–∞–∫–∞ –Ω–∞ Evil Corp", TerminalEffect::Warning);
        terminal.print_with_effect("  fsociety manifest      - –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç", TerminalEffect::Normal);
        terminal.print_with_effect("  fsociety mr_robot      - –°–≤—è–∑–∞—Ç—å—Å—è —Å Mr. Robot", TerminalEffect::Error);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("–ú—ã fsociety.", TerminalEffect::Matrix);
        terminal.print_with_effect("–ú—ã –∞–Ω–æ–Ω–∏–º—ã.", TerminalEffect::Matrix);
        terminal.print_with_effect("–ú—ã –ª–µ–≥–∏–æ–Ω.", TerminalEffect::Matrix);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("ü•ö –û—Ç—Å—ã–ª–∫–∞ –∫ Mr. Robot –Ω–∞–π–¥–µ–Ω–∞!", TerminalEffect::Success);
        return true;
    }
    
    match args[0] {
        "debt_erase" => {
            terminal.print_with_effect("üí£ –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ 5/9...", TerminalEffect::Error);
            terminal.loading_animation("Infiltrating E Corp servers", Duration::from_secs(4));
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üéØ TARGET ACQUIRED: E Corp Financial Systems", TerminalEffect::Warning);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üí• DEBT RECORDS ERASED!", TerminalEffect::Success);
            terminal.print_with_effect("üí∞ Millions of people freed from debt!", TerminalEffect::Success);
            terminal.print_with_effect("üè¶ Banking system in chaos!", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("Operation 5/9 complete. Society is reset.", TerminalEffect::Matrix);
            
            state.player.experience += 500;
            state.reputation += 50;
            terminal.print_with_effect("+500 XP –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é 5/9!", TerminalEffect::Success);
        },
        "evil_corp" => {
            terminal.print_with_effect("üéØ Targeting Evil Corp infrastructure...", TerminalEffect::Warning);
            terminal.loading_animation("Deploying attack vectors", Duration::from_secs(3));
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üíÄ Evil Corp –ø–æ–¥ –º–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–æ–π!", TerminalEffect::Error);
            terminal.print_with_effect("üìä –ò—Ö —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã!", TerminalEffect::Success);
            terminal.print_with_effect("üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–º–ø–µ—Ä–∏—è –¥–∞–µ—Ç —Å–±–æ–∏!", TerminalEffect::Warning);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("\"Fuck society.\" - fsociety", TerminalEffect::Matrix);
            
            state.player.experience += 300;
            state.reputation += 25;
        },
        "manifest" => {
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üìú ‚ïê‚ïê‚ïê –ú–ê–ù–ò–§–ï–°–¢ FSOCIETY ‚ïê‚ïê‚ïê üìú", TerminalEffect::Matrix);
            terminal.print_with_effect("", TerminalEffect::Normal);
            
            let manifest = vec![
                "–û–±—â–µ—Å—Ç–≤–æ —Å–ª–æ–º–∞–Ω–æ.",
                "–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç –∫–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏.",
                "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ - –º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∏ –≤ —Ä—É–∫–∞—Ö 1% —ç–ª–∏—Ç—ã.",
                "–î–µ–Ω—å–≥–∏ —Å—Ç–∞–ª–∏ –æ—Ä—É–∂–∏–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ—Ä–∞–±–æ—â–µ–Ω–∏—è.",
                "",
                "–ù–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–∏–ª–∞.",
                "–ú—ã - –∫–æ–¥ –≤ –∏—Ö –º–∞—Ç—Ä–∏—Ü–µ.",
                "–ú—ã - –≤–∏—Ä—É—Å –≤ –∏—Ö —Å–∏—Å—Ç–µ–º–µ.",
                "–ú—ã - —Å–±–æ–π –≤ –∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–æ–Ω—Ç—Ä–æ–ª—è.",
                "",
                "Fsociety - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥—Ä—É–ø–ø–∞ —Ö–∞–∫–µ—Ä–æ–≤.",
                "–ú—ã - —Ä–µ–≤–æ–ª—é—Ü–∏—è.",
                "–ú—ã –º–µ–Ω—è–µ–º –º–∏—Ä, –ø–æ –æ–¥–Ω–æ–º—É —Ö–∞–∫—É –∑–∞ —Ä–∞–∑.",
                "",
                "Hello, friend.",
                "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º.",
                "–í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–∏—Ç—å.",
            ];
            
            for line in manifest {
                terminal.print_with_effect(line, TerminalEffect::TypeWriter);
                thread::sleep(Duration::from_millis(300));
            }
            
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("- Mr. Robot & fsociety collective", TerminalEffect::Matrix);
        },
        "mr_robot" => {
            terminal.print_with_effect("üìû Establishing secure connection...", TerminalEffect::Matrix);
            terminal.loading_animation("Connecting to Mr. Robot", Duration::from_secs(3));
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üé≠ Mr. Robot: –¢—ã –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É?", TerminalEffect::Error);
            terminal.print_with_effect("üé≠ Mr. Robot: –ù–∞—Å—Ç–æ—è—â–∞—è —Ä–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.", TerminalEffect::Warning);
            terminal.print_with_effect("üé≠ Mr. Robot: –ü–æ–º–Ω–∏ - –º—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ –Ω–µ –¥–ª—è —Å–µ–±—è.", TerminalEffect::Normal);
            terminal.print_with_effect("üé≠ Mr. Robot: –ú—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.", TerminalEffect::Success);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("Connection terminated by remote host.", TerminalEffect::Error);
        },
        _ => {
            terminal.print_with_effect("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è fsociety", TerminalEffect::Error);
            terminal.print_with_effect("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: debt_erase, evil_corp, manifest, mr_robot", TerminalEffect::Normal);
        }
    }
    
    true
}

fn handle_mayhem_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    if args.len() < 2 {
        terminal.print_with_effect("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: mayhem <target> <operation>", TerminalEffect::Error);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("‚ö†Ô∏è  –ü–ï–†–í–û–ï –ü–†–ê–í–ò–õ–û PROJECT MAYHEM:", TerminalEffect::Warning);
        terminal.print_with_effect("    –ù–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ Project Mayhem!", TerminalEffect::Error);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("‚ö†Ô∏è  –í–¢–û–†–û–ï –ü–†–ê–í–ò–õ–û PROJECT MAYHEM:", TerminalEffect::Warning);
        terminal.print_with_effect("    –ù–ò–ö–û–ú–£ –ù–ï –†–ê–°–°–ö–ê–ó–´–í–ê–¢–¨ –û PROJECT MAYHEM!", TerminalEffect::Error);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("ü•ö Fight Club reference detected!", TerminalEffect::Success);
        return true;
    }
    
    let target = args[0];
    let operation = args[1];
    
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üíÄ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üíÄ", TerminalEffect::Error);
    terminal.print_with_effect("                PROJECT MAYHEM                ", TerminalEffect::Error);
    terminal.print_with_effect("üíÄ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üíÄ", TerminalEffect::Error);
    terminal.print_with_effect("", TerminalEffect::Normal);
    
    match operation {
        "destroy" => {
            terminal.print_with_effect(&format!("üß® Targeting for destruction: {}", target), TerminalEffect::Error);
            terminal.loading_animation("Preparing chaos protocols", Duration::from_secs(3));
            terminal.print_with_effect("", TerminalEffect::Normal);
            
            if target.contains("credit") || target.contains("bank") || target.contains("financial") {
                terminal.print_with_effect("üè¶ FINANCIAL TARGET ACQUIRED", TerminalEffect::Warning);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("üí• CREDIT RECORDS DESTROYED!", TerminalEffect::Success);
                terminal.print_with_effect("üí≥ Credit card databases wiped!", TerminalEffect::Success);
                terminal.print_with_effect("üí∞ Debt records erased!", TerminalEffect::Success);
                terminal.print_with_effect("üè¢ Corporate towers digitally demolished!", TerminalEffect::Error);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("\"We are a generation raised by corporations\"", TerminalEffect::Matrix);
                terminal.print_with_effect("\"Now we return the favor.\"", TerminalEffect::Matrix);
                
                state.player.experience += 400;
                state.reputation += 30;
            } else {
                terminal.print_with_effect("üéØ Target eliminated from digital existence", TerminalEffect::Success);
                terminal.print_with_effect("Corporate infrastructure compromised", TerminalEffect::Warning);
                state.player.experience += 200;
            }
        },
        "chaos" => {
            terminal.print_with_effect("‚ö° Initiating controlled chaos...", TerminalEffect::Warning);
            terminal.loading_animation("Spreading digital anarchy", Duration::from_secs(4));
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üå™Ô∏è CHAOS PROTOCOLS ACTIVATED!", TerminalEffect::Error);
            terminal.print_with_effect("üì∫ Corporate media feeds corrupted!", TerminalEffect::Warning);
            terminal.print_with_effect("üè™ Consumer databases randomized!", TerminalEffect::Success);
            terminal.print_with_effect("üíº Executive communications intercepted!", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("\"The things you own end up owning you.\"", TerminalEffect::Matrix);
            terminal.print_with_effect("\"But not anymore.\"", TerminalEffect::Matrix);
            
            state.player.experience += 250;
            state.reputation += 20;
        },
        "fight_club" => {
            terminal.print_with_effect("ü•ä Initiating digital fight club protocols...", TerminalEffect::Matrix);
            terminal.loading_animation("Setting up underground networks", Duration::from_secs(2));
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("ü•ä FIRST RULE OF FIGHT CLUB:", TerminalEffect::Error);
            terminal.print_with_effect("   You do not talk about fight club.", TerminalEffect::Warning);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("ü•ä SECOND RULE OF FIGHT CLUB:", TerminalEffect::Error);
            terminal.print_with_effect("   You DO NOT talk about fight club!", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("Underground hacker cells activated", TerminalEffect::Success);
            terminal.print_with_effect("Digital fight clubs established worldwide", TerminalEffect::Matrix);
            
            state.player.experience += 300;
        },
        _ => {
            terminal.print_with_effect("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è Project Mayhem", TerminalEffect::Error);
            terminal.print_with_effect("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: destroy, chaos, fight_club", TerminalEffect::Normal);
        }
    }
    
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("\"We are a generation of men raised by women.\"", TerminalEffect::Matrix);
    terminal.print_with_effect("\"I'm wondering if another woman is really the answer we need.\"", TerminalEffect::Matrix);
    terminal.print_with_effect("- Tyler Durden", TerminalEffect::Normal);
    
    true
}

fn handle_gibson_command(args: &[&str], state: &mut GameState, terminal: &Terminal) -> bool {
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üñ•Ô∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üñ•Ô∏è", TerminalEffect::Matrix);
    terminal.print_with_effect("           GIBSON SUPERCOMPUTER               ", TerminalEffect::Matrix);
    terminal.print_with_effect("üñ•Ô∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üñ•Ô∏è", TerminalEffect::Matrix);
    terminal.print_with_effect("", TerminalEffect::Normal);
    
    if args.is_empty() {
        terminal.print_with_effect("Welcome to the Gibson!", TerminalEffect::Success);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Gibson:", TerminalEffect::Normal);
        terminal.print_with_effect("  gibson status      - –°—Ç–∞—Ç—É—Å —Å—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä–∞", TerminalEffect::Normal);
        terminal.print_with_effect("  gibson elite       - –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–∏—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞", TerminalEffect::Warning);
        terminal.print_with_effect("  gibson virus       - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Da Vinci –≤–∏—Ä—É—Å–∞", TerminalEffect::Error);
        terminal.print_with_effect("  gibson zero_cool   - –ü—Ä–æ—Ñ–∏–ª—å Zero Cool", TerminalEffect::Success);
        terminal.print_with_effect("  gibson acid_burn   - –ü—Ä–æ—Ñ–∏–ª—å Acid Burn", TerminalEffect::Matrix);
        terminal.print_with_effect("", TerminalEffect::Normal);
        terminal.print_with_effect("ü•ö Gibson –∏–∑ —Ñ–∏–ª—å–º–∞ 'Hackers' (1995)!", TerminalEffect::Success);
        return true;
    }
    
    match args[0] {
        "status" => {
            terminal.print_with_effect("‚ïê‚ïê‚ïê GIBSON SYSTEM STATUS ‚ïê‚ïê‚ïê", TerminalEffect::Matrix);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üñ•Ô∏è  CPU: 9000 MIPS Superscalar Processor", TerminalEffect::Success);
            terminal.print_with_effect("üíæ RAM: Unlimited Virtual Memory", TerminalEffect::Success);
            terminal.print_with_effect("üîí Security Level: MAXIMUM", TerminalEffect::Warning);
            terminal.print_with_effect("üåê Network Status: ONLINE", TerminalEffect::Success);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("‚ö†Ô∏è  ACTIVE THREATS DETECTED:", TerminalEffect::Error);
            terminal.print_with_effect("   - Zero Cool: Multiple intrusion attempts", TerminalEffect::Warning);
            terminal.print_with_effect("   - Acid Burn: Advanced probing detected", TerminalEffect::Warning);
            terminal.print_with_effect("   - The Plague: Administrative access ACTIVE", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üéØ Threat Level: ELITE HACKERS", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("\"Hack the Planet!\" - graffiti found in system logs", TerminalEffect::Matrix);
        },
        "elite" => {
            let hacking_skill = *state.skills.get("–í–∑–ª–æ–º").unwrap_or(&0);
            terminal.print_with_effect("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–∏—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ö–∞–∫–µ—Ä–∞...", TerminalEffect::Matrix);
            terminal.loading_animation("Analyzing hacking prowess", Duration::from_secs(2));
            terminal.print_with_effect("", TerminalEffect::Normal);
            
            if hacking_skill >= 80 {
                terminal.print_with_effect("üèÜ ‚ïê‚ïê‚ïê ELITE HACKER CONFIRMED! ‚ïê‚ïê‚ïê üèÜ", TerminalEffect::Success);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("üéâ Welcome to the elite, hacker!", TerminalEffect::Matrix);
                terminal.print_with_effect("üåç You have earned the right to HACK THE PLANET!", TerminalEffect::Success);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("\"They may take our lives,\"", TerminalEffect::TypeWriter);
                terminal.print_with_effect("\"but they'll never take our FREEDOM!\"", TerminalEffect::TypeWriter);
                terminal.print_with_effect("- Zero Cool", TerminalEffect::Normal);
                
                state.player.experience += 1000;
                state.reputation += 100;
                terminal.print_with_effect("+1000 XP –∑–∞ —ç–ª–∏—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å!", TerminalEffect::Success);
                terminal.print_with_effect("+100 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å—Ä–µ–¥–∏ —Ö–∞–∫–µ—Ä–æ–≤!", TerminalEffect::Success);
            } else {
                terminal.print_with_effect("‚ùå ELITE STATUS: DENIED", TerminalEffect::Error);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("Current skill level insufficient", TerminalEffect::Warning);
                terminal.print_with_effect("Required: 80+ Hacking skill", TerminalEffect::Normal);
                terminal.print_with_effect(&format!("Your level: {}", hacking_skill), TerminalEffect::Normal);
                terminal.print_with_effect("", TerminalEffect::Normal);
                terminal.print_with_effect("\"Keep practicing, script kiddie.\"", TerminalEffect::Error);
                terminal.print_with_effect("- The Gibson", TerminalEffect::Normal);
            }
        },
        "virus" => {
            terminal.print_with_effect("ü¶† Scanning for Da Vinci virus...", TerminalEffect::Warning);
            terminal.loading_animation("Deep system analysis", Duration::from_secs(3));
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("‚ö†Ô∏è ‚ïê‚ïê‚ïê VIRUS DETECTED! ‚ïê‚ïê‚ïê ‚ö†Ô∏è", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("ü¶† Virus Name: Da Vinci", TerminalEffect::Error);
            terminal.print_with_effect("üë§ Author: The Plague (Eugene Belford)", TerminalEffect::Warning);
            terminal.print_with_effect("üéØ Target: Ellingson Mineral Company", TerminalEffect::Normal);
            terminal.print_with_effect("üí∞ Function: Financial theft & frame-up", TerminalEffect::Error);
            terminal.print_with_effect("üìä Status: ACTIVE and stealing money!", TerminalEffect::Error);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üîç Virus Code Sample:", TerminalEffect::Matrix);
            terminal.print_with_effect("    if (account_balance > 0) {", TerminalEffect::Normal);
            terminal.print_with_effect("        steal_money(balance * 0.10);", TerminalEffect::Error);
            terminal.print_with_effect("        frame_hacker('Zero Cool');", TerminalEffect::Warning);
            terminal.print_with_effect("    }", TerminalEffect::Normal);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("\"Welcome to the real world!\" - The Plague", TerminalEffect::Error);
        },
        "zero_cool" => {
            terminal.print_with_effect("üë§ ‚ïê‚ïê‚ïê HACKER PROFILE: ZERO COOL ‚ïê‚ïê‚ïê", TerminalEffect::Success);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üè∑Ô∏è  Real Name: Dade Murphy", TerminalEffect::Normal);
            terminal.print_with_effect("üéÆ Handle: Zero Cool", TerminalEffect::Success);
            terminal.print_with_effect("üìÖ Age: 18", TerminalEffect::Normal);
            terminal.print_with_effect("üè´ School: Stuyvesant High School", TerminalEffect::Normal);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üéØ Notable Achievements:", TerminalEffect::Matrix);
            terminal.print_with_effect("   - Crashed 1,507 systems at age 11", TerminalEffect::Warning);
            terminal.print_with_effect("   - Caused 7-point drop in NYSE", TerminalEffect::Error);
            terminal.print_with_effect("   - Gibson infiltration attempts: 23", TerminalEffect::Normal);
            terminal.print_with_effect("   - Elite hacker status: CONFIRMED", TerminalEffect::Success);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üí¨ Famous Quote:", TerminalEffect::Matrix);
            terminal.print_with_effect("   \"Hack the Planet!\"", TerminalEffect::Success);
        },
        "acid_burn" => {
            terminal.print_with_effect("üë§ ‚ïê‚ïê‚ïê HACKER PROFILE: ACID BURN ‚ïê‚ïê‚ïê", TerminalEffect::Matrix);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üè∑Ô∏è  Real Name: Kate Libby", TerminalEffect::Normal);
            terminal.print_with_effect("üéÆ Handle: Acid Burn", TerminalEffect::Matrix);
            terminal.print_with_effect("üìÖ Age: 18", TerminalEffect::Normal);
            terminal.print_with_effect("üè´ School: Stuyvesant High School", TerminalEffect::Normal);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üéØ Skills Assessment:", TerminalEffect::Matrix);
            terminal.print_with_effect("   - Hacking Level: ELITE", TerminalEffect::Success);
            terminal.print_with_effect("   - Gibson Access: UNAUTHORIZED", TerminalEffect::Warning);
            terminal.print_with_effect("   - Competition vs Zero Cool: INTENSE", TerminalEffect::Error);
            terminal.print_with_effect("   - Leadership: NATURAL", TerminalEffect::Success);
            terminal.print_with_effect("", TerminalEffect::Normal);
            terminal.print_with_effect("üí¨ Assessment:", TerminalEffect::Matrix);
            terminal.print_with_effect("   \"Formidable opponent. Approach with caution.\"", TerminalEffect::Warning);
        },
        _ => {
            terminal.print_with_effect("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Gibson", TerminalEffect::Error);
            terminal.print_with_effect("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: status, elite, virus, zero_cool, acid_burn", TerminalEffect::Normal);
        }
    }
    
    true
}

fn handle_hack_the_planet_command(state: &mut GameState, terminal: &Terminal) -> bool {
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üåç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåç", TerminalEffect::Success);
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("          üöÄ üöÄ üöÄ HACK THE PLANET! üöÄ üöÄ üöÄ", TerminalEffect::Matrix);
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üåç ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåç", TerminalEffect::Success);
    terminal.print_with_effect("", TerminalEffect::Normal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–∞–∫–∏–Ω–≥–∞ –ø–ª–∞–Ω–µ—Ç—ã
    let messages = vec![
        "üåç Connecting to global networks...",
        "üõ∞Ô∏è Hijacking satellite communications...", 
        "üè¶ Infiltrating financial systems...",
        "üèõÔ∏è Breaching government databases...",
        "üè¢ Compromising corporate mainframes...",
        "üì° Taking control of internet backbone...",
        "üåê Planet-wide network access achieved!",
    ];
    
    for message in messages {
        terminal.print_with_effect(message, TerminalEffect::TypeWriter);
        thread::sleep(Duration::from_millis(800));
    }
    
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üéâ ‚ïê‚ïê‚ïê PLANETARY HACK COMPLETE! ‚ïê‚ïê‚ïê üéâ", TerminalEffect::Success);
    terminal.print_with_effect("", TerminalEffect::Normal);
    
    // –¶–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–∞ Hackers
    let quotes = vec![
        "\"They may take our lives, but they'll never take our FREEDOM!\"",
        "\"This is our world now... the world of the electron and the switch.\"",
        "\"We exist without skin color, without nationality, without religious bias.\"",
        "\"You call us criminals. We are the unwanted.\"",
        "\"Yes, I am a criminal. My crime is that of curiosity.\"",
        "\"We make use of a service already existing without paying for what could be dirt-cheap if it wasn't run by profiteering gluttons.\"",
    ];
    
    for quote in &quotes {
        terminal.print_with_effect(quote, TerminalEffect::TypeWriter);
        thread::sleep(Duration::from_millis(600));
    }
    
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("- Zero Cool & The Elite Hackers", TerminalEffect::Normal);
    terminal.print_with_effect("", TerminalEffect::Normal);
    
    terminal.print_with_effect("üèÜ LEGENDARY COMMAND ACTIVATED!", TerminalEffect::Success);
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("üî• –í—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–∏–ª—É –≤—Å–µ—Ö —ç–ª–∏—Ç–Ω—ã—Ö —Ö–∞–∫–µ—Ä–æ–≤!", TerminalEffect::Matrix);
    terminal.print_with_effect("‚ö° –í—Å–µ –Ω–∞–≤—ã–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è!", TerminalEffect::Success);
    terminal.print_with_effect("üåü –≠–ª–∏—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", TerminalEffect::Success);
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Å—Ç –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
    for (skill, value) in state.skills.iter_mut() {
        *value = (*value * 2).min(100);
    }
    
    state.player.experience += 2000;
    state.reputation += 200;
    
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("+2000 XP –∑–∞ HACK THE PLANET!", TerminalEffect::Success);
    terminal.print_with_effect("+200 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å—Ä–µ–¥–∏ —Ö–∞–∫–µ—Ä–æ–≤!", TerminalEffect::Success);
    terminal.print_with_effect("", TerminalEffect::Normal);
    terminal.print_with_effect("ü•ö –ú–ï–ì–ê –ü–ê–°–•–ê–õ–ö–ê: –ö—É–ª—å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –∏–∑ Hackers (1995)!", TerminalEffect::Success);
    
    true
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∏ —Å –æ—Ç—Å—ã–ª–∫–∞–º–∏
pub fn add_reference_networks(networks: &mut HashMap<String, Network>) {
    // –°–µ—Ç—å Evil Corp (Mr. Robot)
    let evil_corp_system = create_evil_corp_system();
    let mut evil_corp_network = Network {
        name: "Evil Corp Network".to_string(),
        security_level: 9,
        systems: HashMap::new(),
        firewall_strength: 95,
        intrusion_detection: true,
        is_compromised: false,
    };
    evil_corp_network.systems.insert("192.168.666.1".to_string(), evil_corp_system);
    networks.insert("192.168.666.1".to_string(), evil_corp_network);
    
    // –°–µ—Ç—å fsociety
    let fsociety_system = create_fsociety_system();
    let mut fsociety_network = Network {
        name: "fsociety Network".to_string(),
        security_level: 3,
        systems: HashMap::new(),
        firewall_strength: 60,
        intrusion_detection: false,
        is_compromised: false,
    };
    fsociety_network.systems.insert("10.0.0.1".to_string(), fsociety_system);
    networks.insert("10.0.0.1".to_string(), fsociety_network);
    
    // –°–µ—Ç—å Project Mayhem (Fight Club)
    let mayhem_system = create_mayhem_system();
    let mut mayhem_network = Network {
        name: "Project Mayhem Network".to_string(),
        security_level: 7,
        systems: HashMap::new(),
        firewall_strength: 80,
        intrusion_detection: false,
        is_compromised: false,
    };
    mayhem_network.systems.insert("172.16.0.99".to_string(), mayhem_system);
    networks.insert("172.16.0.99".to_string(), mayhem_network);
    
    // Gibson Supercomputer (Hackers)
    let gibson_system = create_gibson_system();
    let mut gibson_network = Network {
        name: "Gibson Supercomputer Network".to_string(),
        security_level: 10,
        systems: HashMap::new(),
        firewall_strength: 100,
        intrusion_detection: true,
        is_compromised: false,
    };
    gibson_network.systems.insert("198.51.100.1".to_string(), gibson_system);
    networks.insert("198.51.100.1".to_string(), gibson_network);
    
    // Hacknet Node
    let hacknet_system = create_hacknet_system();
    let mut hacknet_network = Network {
        name: "Hacknet Node Network".to_string(),
        security_level: 6,
        systems: HashMap::new(),
        firewall_strength: 75,
        intrusion_detection: true,
        is_compromised: false,
    };
    hacknet_network.systems.insert("203.0.113.42".to_string(), hacknet_system);
    networks.insert("203.0.113.42".to_string(), hacknet_network);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º
fn create_evil_corp_system() -> System {
    let mut system = System {
        name: "evil-corp-mainframe".to_string(),
        os: "EvilOS 3.1.4".to_string(),
        security_level: 9,
        files: HashMap::new(),
        services: Vec::new(),
        vulnerabilities: Vec::new(),
        is_compromised: false,
        admin_access: false,
    };
    
    system.files.insert("financial_records.db".to_string(), File {
        name: "financial_records.db".to_string(),
        content: "EVIL CORP FINANCIAL DATABASE\n\nüíÄ –î–æ–ª–≥–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏: 99.9% –Ω–∞—Å–µ–ª–µ–Ω–∏—è\nüí∞ –û–±—â–∏–π –¥–æ–ª–≥: $‚àû\n\n// TODO: Implement 5/9 debt erasure protection\n// Note: fsociety threat level CRITICAL\n\n[MEMO] Operation Dark Army approved by board\n[MEMO] White Rose meeting scheduled".to_string(),
        permissions: "root:root 600".to_string(),
        size: 2048576,
        encrypted: true,
        password: Some("hello_friend".to_string()),
    });
    
    system
}

fn create_fsociety_system() -> System {
    let mut system = System {
        name: "fsociety-server".to_string(),
        os: "NAIX 2.4.1".to_string(),
        security_level: 3,
        files: HashMap::new(),
        services: Vec::new(),
        vulnerabilities: Vec::new(),
        is_compromised: false,
        admin_access: false,
    };
    
    system.files.insert("hello_friend.txt".to_string(), File {
        name: "hello_friend.txt".to_string(),
        content: "Hello, friend.\n\n–ê–≤—Ç–æ—Ä —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç.\n–¢—ã –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–Ω–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –º–∏—Ä–æ–º.\n–¢—ã –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ, –Ω–æ —ç—Ç–æ –∫–∞–∫ –∑–∞–Ω–æ–∑–∞ –≤ –º–æ–∑–≥—É.\n–≠—Ç–æ —Å–≤–æ–¥–∏—Ç —Ç–µ–±—è —Å —É–º–∞.\n\n–≠—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è –∫–æ –º–Ω–µ.\n\n–ú—ã fsociety.\n–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—Å–µ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n- E".to_string(),
        permissions: "elliot:fsociety 644".to_string(),
        size: 512,
        encrypted: false,
        password: None,
    });
    
    system
}

fn create_mayhem_system() -> System {
    let mut system = System {
        name: "project-mayhem-ops".to_string(),
        os: "ChaosOS 1.999".to_string(),
        security_level: 7,
        files: HashMap::new(),
        services: Vec::new(),
        vulnerabilities: Vec::new(),
        is_compromised: false,
        admin_access: false,
    };
    
    system.files.insert("fight_club_rules.txt".to_string(), File {
        name: "fight_club_rules.txt".to_string(),
        content: "RULES OF FIGHT CLUB:\n\n1st RULE: You do not talk about FIGHT CLUB.\n2nd RULE: You DO NOT talk about FIGHT CLUB.\n3rd RULE: If someone says \"stop\" or goes limp, taps out the fight is over.\n4th RULE: Only two guys to a fight.\n5th RULE: One fight at a time.\n6th RULE: No shirts, no shoes.\n7th RULE: Fights will go on as long as they have to.\n8th RULE: If this is your first night at FIGHT CLUB, you HAVE to fight.\n\n- Tyler D.".to_string(),
        permissions: "tyler:mayhem 600".to_string(),
        size: 1024,
        encrypted: false,
        password: None,
    });
    
    system
}

fn create_gibson_system() -> System {
    let mut system = System {
        name: "gibson-supercomputer".to_string(),
        os: "Gibson OS 9000".to_string(),
        security_level: 10,
        files: HashMap::new(),
        services: Vec::new(),
        vulnerabilities: Vec::new(),
        is_compromised: false,
        admin_access: false,
    };
    
    system.files.insert("da_vinci_virus.exe".to_string(), File {
        name: "da_vinci_virus.exe".to_string(),
        content: "// Da Vinci Virus v2.1\n// Author: The Plague (Eugene Belford)\n// Target: Ellingson Mineral Company\n\nint main() {\n    while(true) {\n        if (account_balance > 0) {\n            steal_money(balance * 0.10);\n            frame_hacker(\"Zero Cool\");\n            plant_evidence();\n        }\n        sleep(1000);\n    }\n    return 0;\n}\n\n// \"Welcome to the real world!\" - The Plague".to_string(),
        permissions: "plague:hackers 755".to_string(),
        size: 8192,
        encrypted: false,
        password: None,
    });
    
    system
}

fn create_hacknet_system() -> System {
    let mut system = System {
        name: "entropy-node-001".to_string(),
        os: "NAIX 2.4.1".to_string(),
        security_level: 6,
        files: HashMap::new(),
        services: Vec::new(),
        vulnerabilities: Vec::new(),
        is_compromised: false,
        admin_access: false,
    };
    
    system.files.insert("entropy_log.txt".to_string(), File {
        name: "entropy_log.txt".to_string(),
        content: "=== ENTROPY ORGANIZATION LOG ===\n\nMission: Achieve maximum entropy in digital systems\nMethod: Hacknet protocol distribution\nStatus: PHASE 3 ACTIVE\n\nNode Operations:\n- netmap 192.168.1.100\n- portscan 10.0.0.50 1-65535\n- sshcrack target_acquired\n- decypher classified_data.dat\n\nEntropy Level: 89.7%\nTarget: Global digital infrastructure\n\n--- HACKNET PROTOCOL ENGAGED ---".to_string(),
        permissions: "entropy:void 600".to_string(),
        size: 1024,
        encrypted: false,
        password: None,
    });
    
    system
}

use std::thread; 